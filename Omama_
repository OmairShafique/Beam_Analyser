import numpy as np
import matplotlib.pyplot as plt
import tkinter as tk
from tkinter import messagebox

# Function to calculate shear force
def calculate_shear_force(L, loads):
    x = np.linspace(0, L, 1000)
    shear_force = np.zeros_like(x)

    for load in loads:
        if load['type'] == 'point':
            a = load['position']
            P = load['magnitude']
            shear_force[x >= a] += P
        elif load['type'] == 'uniform':
            a = load['position']
            w = load['magnitude']
            shear_force[x >= a] += w * (x[x >= a] - a)

    return x, shear_force

# Function to calculate bending moment
def calculate_bending_moment(L, loads):
    x = np.linspace(0, L, 1000)
    bending_moment = np.zeros_like(x)

    for load in loads:
        if load['type'] == 'point':
            a = load['position']
            P = load['magnitude']
            bending_moment[x >= a] += P * (x[x >= a] - a)
        elif load['type'] == 'uniform':
            a = load['position']
            w = load['magnitude']
            bending_moment[x >= a] += 0.5 * w * (x[x >= a] - a) ** 2

    return x, bending_moment

# Function to calculate deflection
def calculate_deflection(L, loads, I, E):
    x = np.linspace(0, L, 1000)
    deflection = np.zeros_like(x)

    for load in loads:
        if load['type'] == 'point':
            a = load['position']
            P = load['magnitude']
            deflection[x >= a] += (P * (x[x >= a] - a) ** 3) / (6 * E * I)
        elif load['type'] == 'uniform':
            a = load['position']
            w = load['magnitude']
            deflection[x >= a] += (w * (x[x >= a] - a) ** 4) / (24 * E * I)

    return x, deflection

# GUI Setup
def create_gui():
    def submit():
        try:
            L = float(length_entry.get())
            b = float(breadth_entry.get())
            h = float(height_entry.get())
            E = float(elastic_modulus_entry.get())
            num_loads = int(loads_entry.get())

            # Moment of Inertia (I = b * h^3 / 12)
            I = (b * h ** 3) / 12

            loads = []
            for i in range(num_loads):
                load_type = load_type_entries[i].get().strip()
                position = float(position_entries[i].get())
                magnitude = float(magnitude_entries[i].get())
                loads.append({'type': load_type, 'position': position, 'magnitude': magnitude})

            root.destroy()
            run_analysis(L, loads, I, E)

        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid numeric values.")

    root = tk.Tk()
    root.title("Beam Analysis Input")

    # Beam Properties
    tk.Label(root, text="Beam Length (m):").grid(row=0, column=0)
    length_entry = tk.Entry(root)
    length_entry.grid(row=0, column=1)

    tk.Label(root, text="Beam Breadth (m):").grid(row=1, column=0)
    breadth_entry = tk.Entry(root)
    breadth_entry.grid(row=1, column=1)

    tk.Label(root, text="Beam Height (m):").grid(row=2, column=0)
    height_entry = tk.Entry(root)
    height_entry.grid(row=2, column=1)

    tk.Label(root, text="Elastic Modulus (Pa):").grid(row=3, column=0)
    elastic_modulus_entry = tk.Entry(root)
    elastic_modulus_entry.grid(row=3, column=1)

    # Number of Loads
    tk.Label(root, text="Number of Loads:").grid(row=4, column=0)
    loads_entry = tk.Entry(root)
    loads_entry.grid(row=4, column=1)

    load_type_entries = []
    position_entries = []
    magnitude_entries = []

    def add_load_inputs():
        try:
            num_loads = int(loads_entry.get())
            for widget in load_frame.winfo_children():
                widget.destroy()

            for i in range(num_loads):
                tk.Label(load_frame, text=f"Load {i + 1} Type (point/uniform):").grid(row=i, column=0)
                load_type_entry = tk.Entry(load_frame)
                load_type_entry.grid(row=i, column=1)

                tk.Label(load_frame, text="Position (m):").grid(row=i, column=2)
                position_entry = tk.Entry(load_frame)
                position_entry.grid(row=i, column=3)

                tk.Label(load_frame, text="Magnitude (N or N/m):").grid(row=i, column=4)
                magnitude_entry = tk.Entry(load_frame)
                magnitude_entry.grid(row=i, column=5)

                load_type_entries.append(load_type_entry)
                position_entries.append(position_entry)
                magnitude_entries.append(magnitude_entry)

        except ValueError:
            messagebox.showerror("Input Error", "Enter a valid number of loads.")

    load_frame = tk.Frame(root)
    load_frame.grid(row=5, column=0, columnspan=6)

    tk.Button(root, text="Add Loads", command=add_load_inputs).grid(row=6, column=0, columnspan=2)
    tk.Button(root, text="Submit", command=submit).grid(row=7, column=0, columnspan=2)

    root.mainloop()

# Main Execution
def run_analysis(L, loads, I, E):
    x, shear_force = calculate_shear_force(L, loads)
    _, bending_moment = calculate_bending_moment(L, loads)
    _, deflection = calculate_deflection(L, loads, I, E)

    plt.figure(figsize=(12, 8))

    plt.subplot(3, 1, 1)
    plt.plot(x, shear_force, label='Shear Force (N)')
    plt.title('Shear Force Diagram')
    plt.grid(True)

    plt.subplot(3, 1, 2)
    plt.plot(x, bending_moment, label='Bending Moment (Nm)', color='r')
    plt.title('Bending Moment Diagram')
    plt.grid(True)

    plt.subplot(3, 1, 3)
    plt.plot(x, deflection * 1000, label='Deflection (mm)', color='g')
    plt.title('Deflection Diagram')
    plt.grid(True)

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    create_gui()